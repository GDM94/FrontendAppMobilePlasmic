// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: k5kJvsPRoLouUiqztENREe
// Component: xLJRmZlMxT
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import SingUpButton from "../../SingUpButton"; // plasmic-import: kwhioOgxT1/component
import LoginButton from "../../LoginButton"; // plasmic-import: GlgkEs0yZx/component
import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_front_end.module.css"; // plasmic-import: k5kJvsPRoLouUiqztENREe/projectcss
import * as sty from "./PlasmicTopbar.module.css"; // plasmic-import: xLJRmZlMxT/css

export const PlasmicTopbar__VariantProps = new Array();

export const PlasmicTopbar__ArgProps = new Array();

function PlasmicTopbar__RenderFunc(props) {
  const { variants, args, overrides, forNode, dataFetches } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"appTitle"}
        data-plasmic-override={overrides.appTitle}
        className={classNames(defaultcss.all, sty.appTitle)}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__okYnG
          )}
        >
          {"RULEAPP"}
        </div>
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__cj4V3)}
      >
        <SingUpButton
          data-plasmic-name={"singUpButton"}
          data-plasmic-override={overrides.singUpButton}
          className={classNames("__wab_instance", sty.singUpButton)}
        />

        <LoginButton
          data-plasmic-name={"loginButton"}
          data-plasmic-override={overrides.loginButton}
          className={classNames("__wab_instance", sty.loginButton)}
        />
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "appTitle", "singUpButton", "loginButton"],
  appTitle: ["appTitle"],
  singUpButton: ["singUpButton"],
  loginButton: ["loginButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicTopbar__ArgProps,
      internalVariantPropNames: PlasmicTopbar__VariantProps
    });

    const { dataFetches } = props;
    return PlasmicTopbar__RenderFunc({
      variants,
      args,
      overrides,
      dataFetches,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTopbar";
  } else {
    func.displayName = `PlasmicTopbar.${nodeName}`;
  }
  return func;
}

export const PlasmicTopbar = Object.assign(
  // Top-level PlasmicTopbar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    appTitle: makeNodeComponent("appTitle"),
    singUpButton: makeNodeComponent("singUpButton"),
    loginButton: makeNodeComponent("loginButton"),
    // Metadata about props expected for PlasmicTopbar
    internalVariantProps: PlasmicTopbar__VariantProps,
    internalArgProps: PlasmicTopbar__ArgProps
  }
);

export default PlasmicTopbar;
/* prettier-ignore-end */
